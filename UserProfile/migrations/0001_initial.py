# Generated by Django 5.0 on 2023-12-09 11:09

import Bargad.utils
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import functools
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='AcademicSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_year', models.PositiveSmallIntegerField(verbose_name='start year')),
                ('end_year', models.PositiveSmallIntegerField(verbose_name='end year')),
                ('start_date', models.DateField(verbose_name='start date')),
                ('end_date', models.DateField(verbose_name='end date')),
            ],
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=120, unique=True, verbose_name='name')),
            ],
        ),
        migrations.CreateModel(
            name='BargadUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_type', models.CharField(choices=[('Admin', 'Admin'), ('Dean', 'Dean'), ('Head of Department', 'Hod'), ('Staff', 'Staff'), ('Teacher', 'Teacher'), ('Student', 'Student'), ('Alumni', 'Alumni')], default='Student', max_length=32, verbose_name='user type')),
                ('profile_picture', models.ImageField(blank=True, upload_to=functools.partial(Bargad.utils.get_image_file_path, *('profile_pictures',), **{}), verbose_name='profile picture')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Program',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('program_id', models.CharField(max_length=10, verbose_name='program id')),
                ('short_name', models.CharField(max_length=120, verbose_name='short name')),
                ('full_name', models.CharField(max_length=120, verbose_name='full name')),
                ('academic_session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='programs', to='UserProfile.academicsession')),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='programs', to='UserProfile.department')),
            ],
            options={
                'unique_together': {('program_id', 'academic_session', 'department')},
            },
        ),
        migrations.CreateModel(
            name='Semester',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('semester', models.PositiveSmallIntegerField(choices=[(1, 'Semester 1'), (2, 'Semester 2'), (3, 'Semester 3'), (4, 'Semester 4'), (5, 'Semester 5'), (6, 'Semester 6'), (7, 'Semester 7'), (8, 'Semester 8'), (9, 'Semester 9'), (10, 'Semester 10')], verbose_name='semester')),
                ('is_over', models.BooleanField(default=False, verbose_name='is over')),
                ('program', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='UserProfile.program')),
            ],
            options={
                'unique_together': {('semester', 'program')},
            },
        ),
        migrations.CreateModel(
            name='Section',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('section', models.CharField(choices=[('A', 'A'), ('B', 'B'), ('C', 'C'), ('D', 'D'), ('E', 'E'), ('F', 'F'), ('G', 'G'), ('H', 'H'), ('I', 'I'), ('J', 'J'), ('K', 'K'), ('L', 'L'), ('M', 'M'), ('N', 'N'), ('O', 'O'), ('P', 'P'), ('Q', 'Q'), ('R', 'R'), ('S', 'S'), ('T', 'T'), ('U', 'U'), ('V', 'V'), ('W', 'W'), ('X', 'X'), ('Y', 'Y'), ('Z', 'Z')], default='A', max_length=1, verbose_name='section')),
                ('program', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='UserProfile.program')),
                ('semester', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='UserProfile.semester')),
            ],
            options={
                'unique_together': {('program', 'semester', 'section')},
            },
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject_code', models.CharField(max_length=20, verbose_name='subject code')),
                ('short_name', models.CharField(max_length=120, verbose_name='short name')),
                ('full_name', models.CharField(max_length=120, verbose_name='full name')),
                ('program', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='UserProfile.program')),
                ('semester', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='UserProfile.semester')),
            ],
            options={
                'unique_together': {('subject_code', 'program')},
            },
        ),
        migrations.CreateModel(
            name='Session',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(db_index=True, verbose_name='date')),
                ('session', models.PositiveSmallIntegerField(choices=[(1, 'Session 1'), (2, 'Session 2'), (3, 'Session 3'), (4, 'Session 4'), (5, 'Session 5'), (6, 'Session 6'), (7, 'Session 7'), (8, 'Session 8'), (9, 'Session 9'), (10, 'Session 10')], verbose_name='session')),
                ('program', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='UserProfile.program')),
                ('section', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='UserProfile.section')),
                ('semester', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='UserProfile.semester')),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='UserProfile.subject')),
                ('teacher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('program', 'semester', 'section', 'date', 'session')},
            },
        ),
        migrations.CreateModel(
            name='UserProfileBase',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='profile', serialize=False, to=settings.AUTH_USER_MODEL)),
                ('dob', models.DateField(blank=True, verbose_name='Date of Birth')),
                ('gender', models.PositiveSmallIntegerField(blank=True, choices=[('Male', 'Male'), ('Female', 'Female'), ('Other', 'Other')], verbose_name='gender')),
                ('bio', models.CharField(blank=True, max_length=256, verbose_name='bio')),
                ('correspondence_address', models.TextField(blank=True, max_length=1024, verbose_name='correspondence address')),
                ('permanent_address', models.TextField(blank=True, max_length=1024, verbose_name='permanent address')),
                ('primary_contact', models.CharField(blank=True, max_length=15, verbose_name='primary contact')),
                ('secondary_contact', models.CharField(blank=True, max_length=15, verbose_name='secondary contact')),
                ('father_name', models.CharField(blank=True, max_length=120, verbose_name='father name')),
                ('father_qualification', models.CharField(blank=True, max_length=120, verbose_name='father qualification')),
                ('father_contact', models.CharField(blank=True, max_length=15, verbose_name='father contact')),
                ('mother_name', models.CharField(blank=True, max_length=120, verbose_name='mother name')),
                ('mother_qualification', models.CharField(blank=True, max_length=120, verbose_name='mother qualification')),
                ('mother_contact', models.CharField(blank=True, max_length=15, verbose_name='mother contact')),
                ('guardian_name', models.CharField(blank=True, max_length=120, verbose_name='guardian name')),
                ('guardian_contact', models.CharField(blank=True, max_length=15, verbose_name='guardian contact')),
            ],
        ),
        migrations.AddField(
            model_name='department',
            name='head_of_department',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='departments', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='StaffUserProfile',
            fields=[
                ('userprofilebase_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, to='UserProfile.userprofilebase')),
                ('staff_id', models.AutoField(primary_key=True, serialize=False, verbose_name='staff id')),
                ('post', models.CharField(blank=True, max_length=120, verbose_name='post')),
            ],
            bases=('UserProfile.userprofilebase',),
        ),
        migrations.CreateModel(
            name='StudentAttendance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.PositiveSmallIntegerField(choices=[(1, 'Present'), (2, 'Absent')], verbose_name='status')),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='UserProfile.session')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='session_attendance', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('session', 'student')},
            },
        ),
        migrations.CreateModel(
            name='Grade',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('marks', models.PositiveSmallIntegerField(validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(0)], verbose_name='marks')),
                ('remarks', models.CharField(blank=True, max_length=256, verbose_name='remarks')),
                ('semester', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='UserProfile.semester')),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='UserProfile.subject')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='grade', to=settings.AUTH_USER_MODEL)),
                ('teacher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='graded', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('student', 'semester', 'subject')},
            },
        ),
        migrations.CreateModel(
            name='Attendance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(db_index=True, verbose_name='date')),
                ('status', models.PositiveSmallIntegerField(choices=[(1, 'Present'), (2, 'Absent'), (3, 'Late'), (4, 'Leave')], verbose_name='status')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attendance', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('date', 'user')},
            },
        ),
        migrations.CreateModel(
            name='StudentUserProfile',
            fields=[
                ('userprofilebase_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, to='UserProfile.userprofilebase')),
                ('student_id', models.AutoField(primary_key=True, serialize=False, verbose_name='student id')),
                ('is_alumni', models.BooleanField(default=False, verbose_name='is alumni')),
                ('current_section', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='students', to='UserProfile.section')),
                ('program', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='students', to='UserProfile.program')),
                ('subject', models.ManyToManyField(related_name='students', to='UserProfile.subject')),
            ],
            bases=('UserProfile.userprofilebase',),
        ),
        migrations.CreateModel(
            name='TeacherUserProfile',
            fields=[
                ('userprofilebase_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, to='UserProfile.userprofilebase')),
                ('teacher_id', models.AutoField(primary_key=True, serialize=False, verbose_name='teacher id')),
                ('qualification', models.CharField(blank=True, max_length=120, verbose_name='qualification')),
                ('experience', models.CharField(blank=True, max_length=120, verbose_name='experience')),
                ('designation', models.CharField(blank=True, max_length=120, verbose_name='designation')),
                ('subject', models.ManyToManyField(related_name='teachers', to='UserProfile.subject')),
            ],
            bases=('UserProfile.userprofilebase',),
        ),
        migrations.CreateModel(
            name='StudentSectionHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('section', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='section_history', to='UserProfile.section')),
                ('semester', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='section_history', to='UserProfile.semester')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='section_history', to='UserProfile.studentuserprofile')),
            ],
            options={
                'unique_together': {('student', 'semester')},
            },
        ),
    ]
